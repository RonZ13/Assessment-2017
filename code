'''Ron Zhang'''from tkinter import *from math import *import randomQ = {}type_chosen =[]
class question():    def __init__(self,typeDN=None, Age=None,typechosen=None,QN = None):        self.question_number = QN        self.typeDN = typeDN        self.answers = []        self.right = ''        self.age = Age        # if user doesn't want decimal number, generate integer        #generate the number for powers, number too large too calculate, and I avoid younger kids choose this type before so it's doesn't depend on the age         self.powersN1 = random.randint(-100,100)         self.powersN2 = random.randint(-6,4)         self.LogN1 = (random.choice([10,10,10,10,e,e,e,e,e,e,e,e,2]))        self.LogN2 = random.choice([random.randint(1,1000),e])        if typeDN == 0:                if 4<=Age<=8:                #generate random integer in range 1 -- 30                self.N1 = random.randint(1,30)                     self.N2 = random.randint(1,30)                self.numberanswersshown = 3            elif 9<=Age<=16:                #generate random integer in range 1 -- 100                self.N1 = random.randint(-100,100)                     self.N2 = random.randint(-100,100)                self.numberanswersshown = 6            elif 16<Age:                #generate random integer in range 1-- 1000                self.N1 = random.randint(-1000,1000)                self.N2 = random.randint(-1000,1000)                self.numberanswersshown = 9                        #if user wants decimal number, generate decimal numbers        elif typeDN == 1:                           #generate random decimal number in range 1-- 100 with (3.d.p)            ND = 10**random.randint(1,3)            while True:                self.N1 = round(random.uniform(-1000,1000)*ND)/ND                self.N2 = round(random.uniform(-1000,1000)*ND)/ND                 if self.N1 != 0 and self.N2 != 0:                    break                R1 = random.choice(typechosen)        if R1 == 'Addition':            self.Addition()        elif R1 == 'Subtraction':            self.Subtraction()        elif R1 == 'Multiplication':            self.Multiplication()        elif R1 == 'Division':            self.Division()        elif R1 == 'Powers':            self.Powers()        elif R1 =='Logarithm':            self.Logarithm()                                        def Addition(self):        self.Type = 'Addition'        self.answer = self.N1 + self.N2        if self.answer != 0:            tempanswer = self.roundingfunction(self.answer)        self.answers.append( tempanswer )        self.generate_wrong_answers()        self.answer = self.answers[0]            def Subtraction(self):        self.Type = 'Subtraction'        self.answer = self.N1-self.N2        if self.answer != 0:            tempanswer = self.roundingfunction(self.answer)        self.answers.append( tempanswer )        self.generate_wrong_answers()        self.answer = self.answers[0]                    def Multiplication(self):        self.Type = 'Multiplication'        self.answer = self.N1*self.N2        if self.answer != 0:            tempanswer = self.roundingfunction(self.answer)        self.answers.append( tempanswer )        self.generate_wrong_answers()        self.answer = self.answers[0]            def Division(self):        self.Type = 'Division'        while self.N2 == 0:            if 4<=Age<=8:                #generate random integer in range 1 -- 30                   self.N2 = random.randint(1,30)            elif 9<=Age<=13:                #generate random integer in range 1 -- 100                  self.N2 = random.randint(-100,100)                            elif 13<Age:                #generate random integer in range 1-- 1000                self.N2 = random.randint(-1000,1000)                    self.answer = self.N1/self.N2        if self.answer != 0:            tempanswer = self.roundingfunction(self.answer)        self.answers.append( tempanswer )        self.generate_wrong_answers()        self.answer = self.answers[0]                    def Powers(self):        self.Type = 'Powers'              self.N1 = self.powersN1        self.N2 = self.powersN2        self.answer = self.N1 ** self.N2        if self.answer != 0:            tempanswer = self.roundingfunction(self.answer)        self.answers.append( tempanswer )        self.generate_wrong_answers()        self.answer = self.answers[0]            def Logarithm(self):        self.Type = 'Logarithm'        #random choose the base        self.N1 = self.LogN1        self.N2 = self.LogN2        self.answer = log(self.N2,self.N1)        if self.answer != 0:            tempanswer = self.roundingfunction(self.answer)        self.answers.append( tempanswer )        self.generate_wrong_answers()        self.answer = self.answers[0]            def roundingfunction(self,number):        if number == int(number):            number = str(int(number))                    elif number != int(number):              #make the answer to 3sf            if abs(number)<1:                if abs(number)<=(10**(-6)):                    number = (('%.3e' % number)+ '\n(3.s.f)')                else:                                     number = (('%.3g' % number)+ '\n(3.s.f)')            #round number to 3dp             elif number>=1 or number<=-1:                if abs(number)<=10**4:                    number = (('%.3f' % number)+'\n(3.d.p)')                else:                    number = (('%.2e' % number)+ '\n(3.s.f)')            return number            def generate_wrong_answers(self):        #make the probibility of showing the right answer is 0.5        while len(self.answers)< (self.numberanswersshown*2):            #randomly generate answer in different range depending on their age             if 4<=self.age<=8:                lower=round(self.answer-10)                upper= round(self.answer+10)             elif 9<=self.age<=16:                lower=round(self.answer-50)                upper= round(self.answer+50)             elif 16<self.age:                            lower=round(self.answer-20)                upper= round(self.answer+20)                         if self.answer == int(self.answer):                wronganswer = random.randint(lower,upper)                if str(wronganswer) not in self.answers:                    self.answers.append(str(wronganswer))                                elif self.answer != int(self.answer):                wronganswer = random.uniform(lower,upper)                if wronganswer != 0:                    wronganswer = self.roundingfunction(wronganswer)                                if wronganswer not in self.answers:                    self.answers.append(wronganswer)                                     self.answers.append('None of above are correct')                                                        def draw(self,window=None, dictionary = None):                        self.frame= Frame(window)        canvastop= Canvas(self.frame,width= 600, height = 300, bg='beige')                        '''        the top part of the question window        '''        #show the question number and type of question        canvastop.create_text([10,10], text='{}'.format(self.question_number),font="times 15 bold",anchor=NW)        canvastop.create_text([580,10], text='{}'.format(self.Type),font="times 15 bold",anchor=NE)                        #show the question        if self.Type =='Addition':            if self.N2 >=0:                canvastop.create_text([300,150], text='{}{}{}'.format(self.N1 ,' + ',self.N2),font="times 30 bold")            else:                canvastop.create_text([300,150], text='{}{}{}{}'.format(self.N1 ,' + (',self.N2,')'),font="times 30 bold")                                                     elif self.Type =='Subtraction':            if self.N2 >= 0:                canvastop.create_text([300,150], text='{}{}{}'.format(self.N1 ,' - ',self.N2),font="times 30 bold")             else:                canvastop.create_text([300,150], text='{}{}{}{}'.format(self.N1 ,' - (',self.N2,')'),font="times 30 bold")                                  elif self.Type =='Multiplication':            if self.N2 >=0:                canvastop.create_text([300,150], text='{}{}{}'.format(self.N1 ,' × ',self.N2),font="times 30 bold")            else:                canvastop.create_text([300,150], text='{}{}{}{}'.format(self.N1 ,' × (',self.N2,')'),font="times 30 bold")                    elif self.Type =='Division':            canvastop.create_text([300,135], text='{}'.format(self.N1 ),font="times 30 bold")            canvastop.create_line(260, 155, 340, 155,fill='blue',width=2)            canvastop.create_text([300,175], text='{}'.format(self.N2),font="times 30 bold")                elif self.Type =='Powers':            if self.N1>0:                canvastop.create_text([310,150], text='{}'.format(self.N1),font="times 30 bold", anchor=E)             else:                canvastop.create_text([310,150], text='{}{}{}'.format('(',self.N1,'('),font="times 30 bold", anchor=E)             canvastop.create_text([315,130], text='{}'.format(self.N2),font="times 20 bold", anchor=W)                            elif self.Type =='Logarithm':            if self.N1==e:                if self.N2 == e:                    canvastop.create_text([300,150], text='{}'.format('ln(e)'),font="times 30 bold")                else:                    canvastop.create_text([300,150], text='{}{}{}'.format('ln(',self.N2,')'),font="times 30 bold")                            if self.N1 ==10:                if self.N2 == e:                    canvastop.create_text([300,150], text='{}'.format('log(e)'),font="times 30 bold")                else:                    canvastop.create_text([300,150], text='{}{}{}'.format('log(',self.N2,')'),font="times 30 bold")                 if self.N1 ==2:                if self.N2 == e:                    canvastop.create_text([250,150], text='{}'.format('log'),font="times 30 bold")                         canvastop.create_text([285,170], text='{}'.format('2'),font="times 20 bold")                         canvastop.create_text([290,150], text='{}'.format('(e)'),font="times 30 bold", anchor=W)                                    else:                    canvastop.create_text([250,150], text='{}'.format('log'),font="times 30 bold")                         canvastop.create_text([285,170], text='{}'.format('2'),font="times 20 bold")                         canvastop.create_text([290,150], text='{}{}{}'.format('(',self.N2,')'),font="times 30 bold", anchor=W)                                                               '''        the middle part of the question window        '''                canvastop.grid(column=0, row =0, columnspan= 3)                answerbuttons = buttons(values = self.answers, window = self.frame)        answerbuttons.radiob()                length = len(self.answers)        chooselist = list(range(0,length-2))        random.shuffle(chooselist)                # for different age has different number of question show on the screen        self.chosenlist = chooselist[:self.numberanswersshown]                for n,k in enumerate(self.chosenlist):              #calculate which column and row should the button be            answerbuttons.the_button['A%d'%k].grid(column = (n%3), row = self.calculateRow(index = n) +1, pady = 10,padx = 10)                nonebutton = answerbuttons.the_button['A%d'%(length-1)]        nonebutton.config(width=38)        nonebutton.grid(column= 0, row = self.calculateRow(index = length -2)+2, columnspan=3, pady = 10,padx = 10)                                        '''        the bottom part of the question window        '''        canvasbottom = Canvas(self.frame, width = 600, height = 40, bg = 'beige')        self.previousbutton = canvasbottom.create_text([10,20], text='<<Previous', font = 'times 20 bold', anchor= W)        self.nextbutton = canvasbottom.create_text([580,20], text='Next>>', font = 'times 20 bold', anchor = E)                        canvasbottom.grid(column = 0, row = self.calculateRow(index = length -2) + 3, columnspan = 3)                                    def calculateRow(self,columns_of_each_row = 3, index = None):        remainder = index % columns_of_each_row        multiple_of_index = index - remainder        row = multiple_of_index/ columns_of_each_row        return int(row)                            class buttons():    def __init__(self,values= None, window=None):        self.the_button={}        self.window = window          self.values = values                    def checkboxs(self, variableslist =None ):        self.variables = {}        for n in variableslist:            self.variables[n] = IntVar()            self.variables[n].set(0)        for n,v in enumerate(self.values):            self.the_button[v]=  Checkbutton(self.window,                                             text = v ,                                              variable = self.variables[variableslist[n]] ,                                             indicatoron=0,                                              width = 12,                                             bg= 'yellow',                                             selectcolor = 'orange'                                             )
                def radiob(self):        self.value = StringVar()        self.value.set(0)        for n,v in enumerate(self.values):            self.the_button['A%d'%n]= Radiobutton(self.window,                                                  text = str(v),                                                  font= 'CentryGothic 20 bold',                                                   variable = self.value,                                                   value = str(v),                                                  indicatoron = 0,                                                  bg= 'yellow',                                                  selectcolor = 'orange',                                                  width = 12                                                  )            
class main():    def __init__(self):        self.root = Tk()        self.root.title('Simple Math')        self.front_page                                root.mainloop()            def front_page(self):        self.front_f = Frame(self.root)        Label(self.front_f, text = 'Simple Math').grid(column = 0, row = 0, columnspan = 3)                        Label(self.front_f, text = 'Name:').grid(column = 0, row = 1)        Label(self.front_f, text = 'Age').grid(column = 0, row = 2)        Lable(self.front_f, text = 'How many question: \n(5--30)').grid(column = 0, row = 3)                        namebox = Entry(self.front_f, justify = 'Center').grid(column = 1, row = 1)        agebox = Entry(self.front_f, justify = 'Center').grid(column = 1, row = 2)        questionnumberbox = Entry(self.front_f, justify ='Center').grid(column = 1, row = 3)                        self.errorframe = Frame(self.root)        self.errorframe.grid(column = 2, row = 0, rowspan = 3)                        variablelist = ['typeA','typeS','typeM','typeD','typeP','typeL']        textlist = ['Addition','Subtraction','Multiplication','Division','Powers','Logarithm']        choosebutton = buttons(values = textlist, window = self.front_f)        choosebutton.checkboxs(variableslist = variablelist)                                            
